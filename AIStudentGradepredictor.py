# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ccjnKvej8diYZubj5H-j1q5eZS3W16d
"""



# Step 1: Import libraries
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

# Step 2: Create bigger dataset (15 students)
data = pd.DataFrame({
    'Hours_Studied': [5, 3, 1, 4, 6, 2, 7, 3, 5, 6, 4, 2, 1, 7, 5],
    'Attendance': [90, 75, 50, 85, 95, 60, 98, 70, 88, 92, 80, 55, 40, 99, 87],
    'Assignments': [80, 60, 40, 70, 90, 50, 95, 65, 82, 88, 75, 45, 35, 96, 85],
    'Grade': ['A', 'B', 'C', 'B', 'A', 'C', 'A', 'B', 'A', 'A', 'B', 'C', 'C', 'A', 'B']
})

X = data[['Hours_Studied', 'Attendance', 'Assignments']]
y = data['Grade']

# Step 3: Encode grades
le = LabelEncoder()
y_encoded = le.fit_transform(y)  # A=0, B=1, C=2

# Step 4: Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded)

# Step 5: Train Decision Tree model
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Step 6: Test & Evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=le.classes_, zero_division=0))
# Step 7: Interactive prediction
print("\n--- Student Grade Predictor ---")
hours = float(input("Enter Hours Studied: "))
attendance = float(input("Enter Attendance (%): "))
assignments = float(input("Enter Assignments Score: "))

# Convert input to DataFrame with same columns
new_student = pd.DataFrame([[hours, attendance, assignments]], columns=X.columns)
predicted_grade = le.inverse_transform(model.predict(new_student))
print("Predicted Grade:", predicted_grade[0])

